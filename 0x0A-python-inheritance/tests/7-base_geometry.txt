Module ```7-base_geometry```
=============================

Using ``BaseGeometry``
----------------------

Import the ``BaseGeometry`` class:

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Run the tests:

	Instantiate BaseGeometry
	>>> bg = BaseGeometry()

	case 0: calling bg.area()
	>>> bg.area()
	Traceback (most recent call last):
		...
	Exception: area() is not implemented

	case 1: name = width, value = 12
	>>> bg.integer_validator("width", 12)
	
	case 2: value not integer
	>>> bg.integer_validator("width", "alx")
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 3: value = 0
	>>> bg.integer_validator("width", 0)
	Traceback (most recent call last):
		...
	ValueError: width must be greater than 0

	case 4: value is negative
	>>> bg.integer_validator("width", -12)
	Traceback (most recent call last):
		...
	ValueError: width must be greater than 0

	case 5: value is float
	>>> bg.integer_validator("width", 12.6)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 6: missing 1 argument
	>>> bg.integer_validator("width")
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

	case 7: missing 2 arguments
	>>> bg.integer_validator()
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
