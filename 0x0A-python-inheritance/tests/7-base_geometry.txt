Module ```7-base_geometry```
=============================

Using ``BaseGeometry``
----------------------

Import the ``BaseGeometry`` class:

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Run the tests:

	Instantiate BaseGeometry
	>>> bg = BaseGeometry()

	case 0: calling bg.area()
	>>> bg.area()
	Traceback (most recent call last):
		...
	Exception: area() is not implemented

	case 1: name = width, value = 12
	>>> bg.integer_validator("width", 12)
	
	case 2: value is string
	>>> bg.integer_validator("width", "alx")
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 3: value = 0
	>>> bg.integer_validator("width", 0)
	Traceback (most recent call last):
		...
	ValueError: width must be greater than 0

	case 4: value is negative
	>>> bg.integer_validator("width", -12)
	Traceback (most recent call last):
		...
	ValueError: width must be greater than 0

	case 5: value is float
	>>> bg.integer_validator("width", 12.6)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 6: missing 1 argument
	>>> bg.integer_validator("width")
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

	case 7: missing 2 arguments
	>>> bg.integer_validator()
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

	case 8: value is bool
	>>> bg.integer_validator("width", True)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 9: value  is list
	>>> bg.integer_validator("width", [1, 2])
	Traceback (most recent call last):
		...	
	TypeError: width must be an integer

	case 10: value is dictionary
	>>> bg.integer_validator("width", {"a": 1, "c": 2})
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 11: value is None
	>>> bg.integer_validator("width", None)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 12: float('inf')
	>>> bg.integer_validator("width", float('inf'))
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 13: value is very large integer
	>>> bg.integer_validator("width", 1000e1000)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 14: value is negative float
	>>> bg.integer_validator("width", -12.6)
	Traceback (most recent call last):
		...
	TypeError: width must be an integer

	case 15: float('nan')
	>>> bg.integer_validator("width", float('nan'))
	Traceback (most recent call last):
		...
	TypeError: width must be an integer
